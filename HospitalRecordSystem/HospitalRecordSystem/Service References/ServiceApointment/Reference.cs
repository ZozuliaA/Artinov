//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HospitalApointmentSystem.Client.ServiceApointment {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceApointment.IHaService")]
    public interface IHaService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetRole", ReplyAction="http://tempuri.org/IHaService/GetRoleResponse")]
        string GetRole(System.Guid patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetRole", ReplyAction="http://tempuri.org/IHaService/GetRoleResponse")]
        System.Threading.Tasks.Task<string> GetRoleAsync(System.Guid patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/CreateHashOnServer", ReplyAction="http://tempuri.org/IHaService/CreateHashOnServerResponse")]
        string CreateHashOnServer(string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/CreateHashOnServer", ReplyAction="http://tempuri.org/IHaService/CreateHashOnServerResponse")]
        System.Threading.Tasks.Task<string> CreateHashOnServerAsync(string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/VerefyAuth", ReplyAction="http://tempuri.org/IHaService/VerefyAuthResponse")]
        HADatabaseEntity.Patient VerefyAuth(string loggin, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/VerefyAuth", ReplyAction="http://tempuri.org/IHaService/VerefyAuthResponse")]
        System.Threading.Tasks.Task<HADatabaseEntity.Patient> VerefyAuthAsync(string loggin, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/VerefyAuthDoc", ReplyAction="http://tempuri.org/IHaService/VerefyAuthDocResponse")]
        HADatabaseEntity.Doctor VerefyAuthDoc(string loggin, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/VerefyAuthDoc", ReplyAction="http://tempuri.org/IHaService/VerefyAuthDocResponse")]
        System.Threading.Tasks.Task<HADatabaseEntity.Doctor> VerefyAuthDocAsync(string loggin, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetAppoinments", ReplyAction="http://tempuri.org/IHaService/GetAppoinmentsResponse")]
        HADatabaseEntity.Appoinment[] GetAppoinments();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetAppoinments", ReplyAction="http://tempuri.org/IHaService/GetAppoinmentsResponse")]
        System.Threading.Tasks.Task<HADatabaseEntity.Appoinment[]> GetAppoinmentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetAppoinmentsByDate", ReplyAction="http://tempuri.org/IHaService/GetAppoinmentsByDateResponse")]
        HADatabaseEntity.Appoinment[] GetAppoinmentsByDate(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetAppoinmentsByDate", ReplyAction="http://tempuri.org/IHaService/GetAppoinmentsByDateResponse")]
        System.Threading.Tasks.Task<HADatabaseEntity.Appoinment[]> GetAppoinmentsByDateAsync(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetAppoinmentsByPatientId", ReplyAction="http://tempuri.org/IHaService/GetAppoinmentsByPatientIdResponse")]
        HADatabaseEntity.Appoinment[] GetAppoinmentsByPatientId(System.Guid patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetAppoinmentsByPatientId", ReplyAction="http://tempuri.org/IHaService/GetAppoinmentsByPatientIdResponse")]
        System.Threading.Tasks.Task<HADatabaseEntity.Appoinment[]> GetAppoinmentsByPatientIdAsync(System.Guid patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/AddAppointment", ReplyAction="http://tempuri.org/IHaService/AddAppointmentResponse")]
        void AddAppointment(HADatabaseEntity.Appoinment appoinment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/AddAppointment", ReplyAction="http://tempuri.org/IHaService/AddAppointmentResponse")]
        System.Threading.Tasks.Task AddAppointmentAsync(HADatabaseEntity.Appoinment appoinment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/AddAppointmentOnContext", ReplyAction="http://tempuri.org/IHaService/AddAppointmentOnContextResponse")]
        void AddAppointmentOnContext(System.Guid doctorId, System.Guid patientId, System.Guid roomId, HADatabaseEntity.Appoinment app);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/AddAppointmentOnContext", ReplyAction="http://tempuri.org/IHaService/AddAppointmentOnContextResponse")]
        System.Threading.Tasks.Task AddAppointmentOnContextAsync(System.Guid doctorId, System.Guid patientId, System.Guid roomId, HADatabaseEntity.Appoinment app);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/DeleteAppointmentById", ReplyAction="http://tempuri.org/IHaService/DeleteAppointmentByIdResponse")]
        void DeleteAppointmentById(System.Guid appoinmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/DeleteAppointmentById", ReplyAction="http://tempuri.org/IHaService/DeleteAppointmentByIdResponse")]
        System.Threading.Tasks.Task DeleteAppointmentByIdAsync(System.Guid appoinmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetAllPatients", ReplyAction="http://tempuri.org/IHaService/GetAllPatientsResponse")]
        HADatabaseEntity.Patient[] GetAllPatients();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetAllPatients", ReplyAction="http://tempuri.org/IHaService/GetAllPatientsResponse")]
        System.Threading.Tasks.Task<HADatabaseEntity.Patient[]> GetAllPatientsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/AddPatient", ReplyAction="http://tempuri.org/IHaService/AddPatientResponse")]
        void AddPatient(HADatabaseEntity.Patient patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/AddPatient", ReplyAction="http://tempuri.org/IHaService/AddPatientResponse")]
        System.Threading.Tasks.Task AddPatientAsync(HADatabaseEntity.Patient patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetPatientByAppointmentId", ReplyAction="http://tempuri.org/IHaService/GetPatientByAppointmentIdResponse")]
        HADatabaseEntity.Patient GetPatientByAppointmentId(System.Guid appointmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetPatientByAppointmentId", ReplyAction="http://tempuri.org/IHaService/GetPatientByAppointmentIdResponse")]
        System.Threading.Tasks.Task<HADatabaseEntity.Patient> GetPatientByAppointmentIdAsync(System.Guid appointmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetPhoneByPatientId", ReplyAction="http://tempuri.org/IHaService/GetPhoneByPatientIdResponse")]
        HADatabaseEntity.Phone GetPhoneByPatientId(System.Guid patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetPhoneByPatientId", ReplyAction="http://tempuri.org/IHaService/GetPhoneByPatientIdResponse")]
        System.Threading.Tasks.Task<HADatabaseEntity.Phone> GetPhoneByPatientIdAsync(System.Guid patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetPassportByPatientId", ReplyAction="http://tempuri.org/IHaService/GetPassportByPatientIdResponse")]
        HADatabaseEntity.Passport GetPassportByPatientId(System.Guid patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetPassportByPatientId", ReplyAction="http://tempuri.org/IHaService/GetPassportByPatientIdResponse")]
        System.Threading.Tasks.Task<HADatabaseEntity.Passport> GetPassportByPatientIdAsync(System.Guid patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetAddressByPatientId", ReplyAction="http://tempuri.org/IHaService/GetAddressByPatientIdResponse")]
        HADatabaseEntity.Address GetAddressByPatientId(System.Guid patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetAddressByPatientId", ReplyAction="http://tempuri.org/IHaService/GetAddressByPatientIdResponse")]
        System.Threading.Tasks.Task<HADatabaseEntity.Address> GetAddressByPatientIdAsync(System.Guid patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetHistoryBookByPatientId", ReplyAction="http://tempuri.org/IHaService/GetHistoryBookByPatientIdResponse")]
        HADatabaseEntity.HistoryBook GetHistoryBookByPatientId(System.Guid patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetHistoryBookByPatientId", ReplyAction="http://tempuri.org/IHaService/GetHistoryBookByPatientIdResponse")]
        System.Threading.Tasks.Task<HADatabaseEntity.HistoryBook> GetHistoryBookByPatientIdAsync(System.Guid patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/DeletePatient", ReplyAction="http://tempuri.org/IHaService/DeletePatientResponse")]
        void DeletePatient(System.Guid patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/DeletePatient", ReplyAction="http://tempuri.org/IHaService/DeletePatientResponse")]
        System.Threading.Tasks.Task DeletePatientAsync(System.Guid patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/InsertPatient", ReplyAction="http://tempuri.org/IHaService/InsertPatientResponse")]
        void InsertPatient(HADatabaseEntity.Patient patientEntity, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/InsertPatient", ReplyAction="http://tempuri.org/IHaService/InsertPatientResponse")]
        System.Threading.Tasks.Task InsertPatientAsync(HADatabaseEntity.Patient patientEntity, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/InsertRoom", ReplyAction="http://tempuri.org/IHaService/InsertRoomResponse")]
        void InsertRoom(HADatabaseEntity.Room room);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/InsertRoom", ReplyAction="http://tempuri.org/IHaService/InsertRoomResponse")]
        System.Threading.Tasks.Task InsertRoomAsync(HADatabaseEntity.Room room);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetRooms", ReplyAction="http://tempuri.org/IHaService/GetRoomsResponse")]
        HADatabaseEntity.Room[] GetRooms();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetRooms", ReplyAction="http://tempuri.org/IHaService/GetRoomsResponse")]
        System.Threading.Tasks.Task<HADatabaseEntity.Room[]> GetRoomsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetRoomByNumber", ReplyAction="http://tempuri.org/IHaService/GetRoomByNumberResponse")]
        HADatabaseEntity.Room GetRoomByNumber(int number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetRoomByNumber", ReplyAction="http://tempuri.org/IHaService/GetRoomByNumberResponse")]
        System.Threading.Tasks.Task<HADatabaseEntity.Room> GetRoomByNumberAsync(int number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetRoomById", ReplyAction="http://tempuri.org/IHaService/GetRoomByIdResponse")]
        HADatabaseEntity.Room GetRoomById(System.Guid roomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetRoomById", ReplyAction="http://tempuri.org/IHaService/GetRoomByIdResponse")]
        System.Threading.Tasks.Task<HADatabaseEntity.Room> GetRoomByIdAsync(System.Guid roomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/EditRoom", ReplyAction="http://tempuri.org/IHaService/EditRoomResponse")]
        void EditRoom(HADatabaseEntity.Room room);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/EditRoom", ReplyAction="http://tempuri.org/IHaService/EditRoomResponse")]
        System.Threading.Tasks.Task EditRoomAsync(HADatabaseEntity.Room room);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/DeleteRoomById", ReplyAction="http://tempuri.org/IHaService/DeleteRoomByIdResponse")]
        void DeleteRoomById(System.Guid roomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/DeleteRoomById", ReplyAction="http://tempuri.org/IHaService/DeleteRoomByIdResponse")]
        System.Threading.Tasks.Task DeleteRoomByIdAsync(System.Guid roomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetSpecialties", ReplyAction="http://tempuri.org/IHaService/GetSpecialtiesResponse")]
        HADatabaseEntity.Specialty[] GetSpecialties();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetSpecialties", ReplyAction="http://tempuri.org/IHaService/GetSpecialtiesResponse")]
        System.Threading.Tasks.Task<HADatabaseEntity.Specialty[]> GetSpecialtiesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetSpecialtyByName", ReplyAction="http://tempuri.org/IHaService/GetSpecialtyByNameResponse")]
        HADatabaseEntity.Specialty GetSpecialtyByName(string specialty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetSpecialtyByName", ReplyAction="http://tempuri.org/IHaService/GetSpecialtyByNameResponse")]
        System.Threading.Tasks.Task<HADatabaseEntity.Specialty> GetSpecialtyByNameAsync(string specialty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetSpecialtyIdByName", ReplyAction="http://tempuri.org/IHaService/GetSpecialtyIdByNameResponse")]
        int GetSpecialtyIdByName(string specialty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetSpecialtyIdByName", ReplyAction="http://tempuri.org/IHaService/GetSpecialtyIdByNameResponse")]
        System.Threading.Tasks.Task<int> GetSpecialtyIdByNameAsync(string specialty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetSpecialtyById", ReplyAction="http://tempuri.org/IHaService/GetSpecialtyByIdResponse")]
        HADatabaseEntity.Specialty GetSpecialtyById(int spesialtyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetSpecialtyById", ReplyAction="http://tempuri.org/IHaService/GetSpecialtyByIdResponse")]
        System.Threading.Tasks.Task<HADatabaseEntity.Specialty> GetSpecialtyByIdAsync(int spesialtyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/AddSpecialty", ReplyAction="http://tempuri.org/IHaService/AddSpecialtyResponse")]
        void AddSpecialty(HADatabaseEntity.Specialty entitySpecialty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/AddSpecialty", ReplyAction="http://tempuri.org/IHaService/AddSpecialtyResponse")]
        System.Threading.Tasks.Task AddSpecialtyAsync(HADatabaseEntity.Specialty entitySpecialty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/EditSpecialty", ReplyAction="http://tempuri.org/IHaService/EditSpecialtyResponse")]
        void EditSpecialty(HADatabaseEntity.Specialty entitySpecialty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/EditSpecialty", ReplyAction="http://tempuri.org/IHaService/EditSpecialtyResponse")]
        System.Threading.Tasks.Task EditSpecialtyAsync(HADatabaseEntity.Specialty entitySpecialty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/DeleteSpecialty", ReplyAction="http://tempuri.org/IHaService/DeleteSpecialtyResponse")]
        void DeleteSpecialty(HADatabaseEntity.Specialty specialty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/DeleteSpecialty", ReplyAction="http://tempuri.org/IHaService/DeleteSpecialtyResponse")]
        System.Threading.Tasks.Task DeleteSpecialtyAsync(HADatabaseEntity.Specialty specialty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetDoctors", ReplyAction="http://tempuri.org/IHaService/GetDoctorsResponse")]
        HADatabaseEntity.Doctor[] GetDoctors();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetDoctors", ReplyAction="http://tempuri.org/IHaService/GetDoctorsResponse")]
        System.Threading.Tasks.Task<HADatabaseEntity.Doctor[]> GetDoctorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetDoctorById", ReplyAction="http://tempuri.org/IHaService/GetDoctorByIdResponse")]
        HADatabaseEntity.Doctor GetDoctorById(System.Guid doctoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetDoctorById", ReplyAction="http://tempuri.org/IHaService/GetDoctorByIdResponse")]
        System.Threading.Tasks.Task<HADatabaseEntity.Doctor> GetDoctorByIdAsync(System.Guid doctoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/AddDoctor", ReplyAction="http://tempuri.org/IHaService/AddDoctorResponse")]
        void AddDoctor(HADatabaseEntity.Doctor doctor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/AddDoctor", ReplyAction="http://tempuri.org/IHaService/AddDoctorResponse")]
        System.Threading.Tasks.Task AddDoctorAsync(HADatabaseEntity.Doctor doctor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/AddDoctorOnContext", ReplyAction="http://tempuri.org/IHaService/AddDoctorOnContextResponse")]
        void AddDoctorOnContext(HADatabaseEntity.Doctor doc, int spesialtyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/AddDoctorOnContext", ReplyAction="http://tempuri.org/IHaService/AddDoctorOnContextResponse")]
        System.Threading.Tasks.Task AddDoctorOnContextAsync(HADatabaseEntity.Doctor doc, int spesialtyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetDoctorsBySpecialy", ReplyAction="http://tempuri.org/IHaService/GetDoctorsBySpecialyResponse")]
        HADatabaseEntity.Doctor[] GetDoctorsBySpecialy(int specialty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/GetDoctorsBySpecialy", ReplyAction="http://tempuri.org/IHaService/GetDoctorsBySpecialyResponse")]
        System.Threading.Tasks.Task<HADatabaseEntity.Doctor[]> GetDoctorsBySpecialyAsync(int specialty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/EditDoctor", ReplyAction="http://tempuri.org/IHaService/EditDoctorResponse")]
        void EditDoctor(HADatabaseEntity.Doctor entityDoctor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/EditDoctor", ReplyAction="http://tempuri.org/IHaService/EditDoctorResponse")]
        System.Threading.Tasks.Task EditDoctorAsync(HADatabaseEntity.Doctor entityDoctor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/DeleteDoctorById", ReplyAction="http://tempuri.org/IHaService/DeleteDoctorByIdResponse")]
        void DeleteDoctorById(System.Guid doctorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/DeleteDoctorById", ReplyAction="http://tempuri.org/IHaService/DeleteDoctorByIdResponse")]
        System.Threading.Tasks.Task DeleteDoctorByIdAsync(System.Guid doctorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/EditDays", ReplyAction="http://tempuri.org/IHaService/EditDaysResponse")]
        void EditDays(HADatabaseEntity.DaysOfReceiving entityDaysOfReceiving);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/EditDays", ReplyAction="http://tempuri.org/IHaService/EditDaysResponse")]
        System.Threading.Tasks.Task EditDaysAsync(HADatabaseEntity.DaysOfReceiving entityDaysOfReceiving);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/EditTime", ReplyAction="http://tempuri.org/IHaService/EditTimeResponse")]
        void EditTime(HADatabaseEntity.TimeOfReceiving entityOfReceiving);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHaService/EditTime", ReplyAction="http://tempuri.org/IHaService/EditTimeResponse")]
        System.Threading.Tasks.Task EditTimeAsync(HADatabaseEntity.TimeOfReceiving entityOfReceiving);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IHaServiceChannel : HospitalApointmentSystem.Client.ServiceApointment.IHaService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class HaServiceClient : System.ServiceModel.ClientBase<HospitalApointmentSystem.Client.ServiceApointment.IHaService>, HospitalApointmentSystem.Client.ServiceApointment.IHaService {
        
        public HaServiceClient() {
        }
        
        public HaServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public HaServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HaServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HaServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetRole(System.Guid patientId) {
            return base.Channel.GetRole(patientId);
        }
        
        public System.Threading.Tasks.Task<string> GetRoleAsync(System.Guid patientId) {
            return base.Channel.GetRoleAsync(patientId);
        }
        
        public string CreateHashOnServer(string password) {
            return base.Channel.CreateHashOnServer(password);
        }
        
        public System.Threading.Tasks.Task<string> CreateHashOnServerAsync(string password) {
            return base.Channel.CreateHashOnServerAsync(password);
        }
        
        public HADatabaseEntity.Patient VerefyAuth(string loggin, string password) {
            return base.Channel.VerefyAuth(loggin, password);
        }
        
        public System.Threading.Tasks.Task<HADatabaseEntity.Patient> VerefyAuthAsync(string loggin, string password) {
            return base.Channel.VerefyAuthAsync(loggin, password);
        }
        
        public HADatabaseEntity.Doctor VerefyAuthDoc(string loggin, string password) {
            return base.Channel.VerefyAuthDoc(loggin, password);
        }
        
        public System.Threading.Tasks.Task<HADatabaseEntity.Doctor> VerefyAuthDocAsync(string loggin, string password) {
            return base.Channel.VerefyAuthDocAsync(loggin, password);
        }
        
        public HADatabaseEntity.Appoinment[] GetAppoinments() {
            return base.Channel.GetAppoinments();
        }
        
        public System.Threading.Tasks.Task<HADatabaseEntity.Appoinment[]> GetAppoinmentsAsync() {
            return base.Channel.GetAppoinmentsAsync();
        }
        
        public HADatabaseEntity.Appoinment[] GetAppoinmentsByDate(System.DateTime date) {
            return base.Channel.GetAppoinmentsByDate(date);
        }
        
        public System.Threading.Tasks.Task<HADatabaseEntity.Appoinment[]> GetAppoinmentsByDateAsync(System.DateTime date) {
            return base.Channel.GetAppoinmentsByDateAsync(date);
        }
        
        public HADatabaseEntity.Appoinment[] GetAppoinmentsByPatientId(System.Guid patientId) {
            return base.Channel.GetAppoinmentsByPatientId(patientId);
        }
        
        public System.Threading.Tasks.Task<HADatabaseEntity.Appoinment[]> GetAppoinmentsByPatientIdAsync(System.Guid patientId) {
            return base.Channel.GetAppoinmentsByPatientIdAsync(patientId);
        }
        
        public void AddAppointment(HADatabaseEntity.Appoinment appoinment) {
            base.Channel.AddAppointment(appoinment);
        }
        
        public System.Threading.Tasks.Task AddAppointmentAsync(HADatabaseEntity.Appoinment appoinment) {
            return base.Channel.AddAppointmentAsync(appoinment);
        }
        
        public void AddAppointmentOnContext(System.Guid doctorId, System.Guid patientId, System.Guid roomId, HADatabaseEntity.Appoinment app) {
            base.Channel.AddAppointmentOnContext(doctorId, patientId, roomId, app);
        }
        
        public System.Threading.Tasks.Task AddAppointmentOnContextAsync(System.Guid doctorId, System.Guid patientId, System.Guid roomId, HADatabaseEntity.Appoinment app) {
            return base.Channel.AddAppointmentOnContextAsync(doctorId, patientId, roomId, app);
        }
        
        public void DeleteAppointmentById(System.Guid appoinmentId) {
            base.Channel.DeleteAppointmentById(appoinmentId);
        }
        
        public System.Threading.Tasks.Task DeleteAppointmentByIdAsync(System.Guid appoinmentId) {
            return base.Channel.DeleteAppointmentByIdAsync(appoinmentId);
        }
        
        public HADatabaseEntity.Patient[] GetAllPatients() {
            return base.Channel.GetAllPatients();
        }
        
        public System.Threading.Tasks.Task<HADatabaseEntity.Patient[]> GetAllPatientsAsync() {
            return base.Channel.GetAllPatientsAsync();
        }
        
        public void AddPatient(HADatabaseEntity.Patient patient) {
            base.Channel.AddPatient(patient);
        }
        
        public System.Threading.Tasks.Task AddPatientAsync(HADatabaseEntity.Patient patient) {
            return base.Channel.AddPatientAsync(patient);
        }
        
        public HADatabaseEntity.Patient GetPatientByAppointmentId(System.Guid appointmentId) {
            return base.Channel.GetPatientByAppointmentId(appointmentId);
        }
        
        public System.Threading.Tasks.Task<HADatabaseEntity.Patient> GetPatientByAppointmentIdAsync(System.Guid appointmentId) {
            return base.Channel.GetPatientByAppointmentIdAsync(appointmentId);
        }
        
        public HADatabaseEntity.Phone GetPhoneByPatientId(System.Guid patientId) {
            return base.Channel.GetPhoneByPatientId(patientId);
        }
        
        public System.Threading.Tasks.Task<HADatabaseEntity.Phone> GetPhoneByPatientIdAsync(System.Guid patientId) {
            return base.Channel.GetPhoneByPatientIdAsync(patientId);
        }
        
        public HADatabaseEntity.Passport GetPassportByPatientId(System.Guid patientId) {
            return base.Channel.GetPassportByPatientId(patientId);
        }
        
        public System.Threading.Tasks.Task<HADatabaseEntity.Passport> GetPassportByPatientIdAsync(System.Guid patientId) {
            return base.Channel.GetPassportByPatientIdAsync(patientId);
        }
        
        public HADatabaseEntity.Address GetAddressByPatientId(System.Guid patientId) {
            return base.Channel.GetAddressByPatientId(patientId);
        }
        
        public System.Threading.Tasks.Task<HADatabaseEntity.Address> GetAddressByPatientIdAsync(System.Guid patientId) {
            return base.Channel.GetAddressByPatientIdAsync(patientId);
        }
        
        public HADatabaseEntity.HistoryBook GetHistoryBookByPatientId(System.Guid patientId) {
            return base.Channel.GetHistoryBookByPatientId(patientId);
        }
        
        public System.Threading.Tasks.Task<HADatabaseEntity.HistoryBook> GetHistoryBookByPatientIdAsync(System.Guid patientId) {
            return base.Channel.GetHistoryBookByPatientIdAsync(patientId);
        }
        
        public void DeletePatient(System.Guid patientId) {
            base.Channel.DeletePatient(patientId);
        }
        
        public System.Threading.Tasks.Task DeletePatientAsync(System.Guid patientId) {
            return base.Channel.DeletePatientAsync(patientId);
        }
        
        public void InsertPatient(HADatabaseEntity.Patient patientEntity, string password) {
            base.Channel.InsertPatient(patientEntity, password);
        }
        
        public System.Threading.Tasks.Task InsertPatientAsync(HADatabaseEntity.Patient patientEntity, string password) {
            return base.Channel.InsertPatientAsync(patientEntity, password);
        }
        
        public void InsertRoom(HADatabaseEntity.Room room) {
            base.Channel.InsertRoom(room);
        }
        
        public System.Threading.Tasks.Task InsertRoomAsync(HADatabaseEntity.Room room) {
            return base.Channel.InsertRoomAsync(room);
        }
        
        public HADatabaseEntity.Room[] GetRooms() {
            return base.Channel.GetRooms();
        }
        
        public System.Threading.Tasks.Task<HADatabaseEntity.Room[]> GetRoomsAsync() {
            return base.Channel.GetRoomsAsync();
        }
        
        public HADatabaseEntity.Room GetRoomByNumber(int number) {
            return base.Channel.GetRoomByNumber(number);
        }
        
        public System.Threading.Tasks.Task<HADatabaseEntity.Room> GetRoomByNumberAsync(int number) {
            return base.Channel.GetRoomByNumberAsync(number);
        }
        
        public HADatabaseEntity.Room GetRoomById(System.Guid roomId) {
            return base.Channel.GetRoomById(roomId);
        }
        
        public System.Threading.Tasks.Task<HADatabaseEntity.Room> GetRoomByIdAsync(System.Guid roomId) {
            return base.Channel.GetRoomByIdAsync(roomId);
        }
        
        public void EditRoom(HADatabaseEntity.Room room) {
            base.Channel.EditRoom(room);
        }
        
        public System.Threading.Tasks.Task EditRoomAsync(HADatabaseEntity.Room room) {
            return base.Channel.EditRoomAsync(room);
        }
        
        public void DeleteRoomById(System.Guid roomId) {
            base.Channel.DeleteRoomById(roomId);
        }
        
        public System.Threading.Tasks.Task DeleteRoomByIdAsync(System.Guid roomId) {
            return base.Channel.DeleteRoomByIdAsync(roomId);
        }
        
        public HADatabaseEntity.Specialty[] GetSpecialties() {
            return base.Channel.GetSpecialties();
        }
        
        public System.Threading.Tasks.Task<HADatabaseEntity.Specialty[]> GetSpecialtiesAsync() {
            return base.Channel.GetSpecialtiesAsync();
        }
        
        public HADatabaseEntity.Specialty GetSpecialtyByName(string specialty) {
            return base.Channel.GetSpecialtyByName(specialty);
        }
        
        public System.Threading.Tasks.Task<HADatabaseEntity.Specialty> GetSpecialtyByNameAsync(string specialty) {
            return base.Channel.GetSpecialtyByNameAsync(specialty);
        }
        
        public int GetSpecialtyIdByName(string specialty) {
            return base.Channel.GetSpecialtyIdByName(specialty);
        }
        
        public System.Threading.Tasks.Task<int> GetSpecialtyIdByNameAsync(string specialty) {
            return base.Channel.GetSpecialtyIdByNameAsync(specialty);
        }
        
        public HADatabaseEntity.Specialty GetSpecialtyById(int spesialtyId) {
            return base.Channel.GetSpecialtyById(spesialtyId);
        }
        
        public System.Threading.Tasks.Task<HADatabaseEntity.Specialty> GetSpecialtyByIdAsync(int spesialtyId) {
            return base.Channel.GetSpecialtyByIdAsync(spesialtyId);
        }
        
        public void AddSpecialty(HADatabaseEntity.Specialty entitySpecialty) {
            base.Channel.AddSpecialty(entitySpecialty);
        }
        
        public System.Threading.Tasks.Task AddSpecialtyAsync(HADatabaseEntity.Specialty entitySpecialty) {
            return base.Channel.AddSpecialtyAsync(entitySpecialty);
        }
        
        public void EditSpecialty(HADatabaseEntity.Specialty entitySpecialty) {
            base.Channel.EditSpecialty(entitySpecialty);
        }
        
        public System.Threading.Tasks.Task EditSpecialtyAsync(HADatabaseEntity.Specialty entitySpecialty) {
            return base.Channel.EditSpecialtyAsync(entitySpecialty);
        }
        
        public void DeleteSpecialty(HADatabaseEntity.Specialty specialty) {
            base.Channel.DeleteSpecialty(specialty);
        }
        
        public System.Threading.Tasks.Task DeleteSpecialtyAsync(HADatabaseEntity.Specialty specialty) {
            return base.Channel.DeleteSpecialtyAsync(specialty);
        }
        
        public HADatabaseEntity.Doctor[] GetDoctors() {
            return base.Channel.GetDoctors();
        }
        
        public System.Threading.Tasks.Task<HADatabaseEntity.Doctor[]> GetDoctorsAsync() {
            return base.Channel.GetDoctorsAsync();
        }
        
        public HADatabaseEntity.Doctor GetDoctorById(System.Guid doctoId) {
            return base.Channel.GetDoctorById(doctoId);
        }
        
        public System.Threading.Tasks.Task<HADatabaseEntity.Doctor> GetDoctorByIdAsync(System.Guid doctoId) {
            return base.Channel.GetDoctorByIdAsync(doctoId);
        }
        
        public void AddDoctor(HADatabaseEntity.Doctor doctor) {
            base.Channel.AddDoctor(doctor);
        }
        
        public System.Threading.Tasks.Task AddDoctorAsync(HADatabaseEntity.Doctor doctor) {
            return base.Channel.AddDoctorAsync(doctor);
        }
        
        public void AddDoctorOnContext(HADatabaseEntity.Doctor doc, int spesialtyId) {
            base.Channel.AddDoctorOnContext(doc, spesialtyId);
        }
        
        public System.Threading.Tasks.Task AddDoctorOnContextAsync(HADatabaseEntity.Doctor doc, int spesialtyId) {
            return base.Channel.AddDoctorOnContextAsync(doc, spesialtyId);
        }
        
        public HADatabaseEntity.Doctor[] GetDoctorsBySpecialy(int specialty) {
            return base.Channel.GetDoctorsBySpecialy(specialty);
        }
        
        public System.Threading.Tasks.Task<HADatabaseEntity.Doctor[]> GetDoctorsBySpecialyAsync(int specialty) {
            return base.Channel.GetDoctorsBySpecialyAsync(specialty);
        }
        
        public void EditDoctor(HADatabaseEntity.Doctor entityDoctor) {
            base.Channel.EditDoctor(entityDoctor);
        }
        
        public System.Threading.Tasks.Task EditDoctorAsync(HADatabaseEntity.Doctor entityDoctor) {
            return base.Channel.EditDoctorAsync(entityDoctor);
        }
        
        public void DeleteDoctorById(System.Guid doctorId) {
            base.Channel.DeleteDoctorById(doctorId);
        }
        
        public System.Threading.Tasks.Task DeleteDoctorByIdAsync(System.Guid doctorId) {
            return base.Channel.DeleteDoctorByIdAsync(doctorId);
        }
        
        public void EditDays(HADatabaseEntity.DaysOfReceiving entityDaysOfReceiving) {
            base.Channel.EditDays(entityDaysOfReceiving);
        }
        
        public System.Threading.Tasks.Task EditDaysAsync(HADatabaseEntity.DaysOfReceiving entityDaysOfReceiving) {
            return base.Channel.EditDaysAsync(entityDaysOfReceiving);
        }
        
        public void EditTime(HADatabaseEntity.TimeOfReceiving entityOfReceiving) {
            base.Channel.EditTime(entityOfReceiving);
        }
        
        public System.Threading.Tasks.Task EditTimeAsync(HADatabaseEntity.TimeOfReceiving entityOfReceiving) {
            return base.Channel.EditTimeAsync(entityOfReceiving);
        }
    }
}
